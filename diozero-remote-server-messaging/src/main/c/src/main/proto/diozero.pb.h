/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.1 */

#ifndef PB_DIOZERO_SRC_MAIN_PROTO_DIOZERO_PB_H_INCLUDED
#define PB_DIOZERO_SRC_MAIN_PROTO_DIOZERO_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _diozero_Status {
    diozero_Status_OK = 0,
    diozero_Status_ERROR = 1
} diozero_Status;

typedef enum _diozero_Gpio_PullUpDown {
    diozero_Gpio_PullUpDown_PUD_NONE = 0,
    diozero_Gpio_PullUpDown_PUD_PULL_UP = 1,
    diozero_Gpio_PullUpDown_PUD_PULL_DOWN = 2
} diozero_Gpio_PullUpDown;

typedef enum _diozero_Gpio_Trigger {
    diozero_Gpio_Trigger_TRIGGER_NONE = 0,
    diozero_Gpio_Trigger_TRIGGER_RISING = 1,
    diozero_Gpio_Trigger_TRIGGER_FALLING = 2,
    diozero_Gpio_Trigger_TRIGGER_BOTH = 3
} diozero_Gpio_Trigger;

typedef enum _diozero_Gpio_GpioMode {
    diozero_Gpio_GpioMode_DIGITAL_INPUT = 0,
    diozero_Gpio_GpioMode_DIGITAL_OUTPUT = 1,
    diozero_Gpio_GpioMode_PWM_OUTPUT = 2,
    diozero_Gpio_GpioMode_ANALOG_INPUT = 3,
    diozero_Gpio_GpioMode_ANALOG_OUTPUT = 4,
    diozero_Gpio_GpioMode_UNKNOWN = 5
} diozero_Gpio_GpioMode;

typedef enum _diozero_Spi_ClockMode {
    diozero_Spi_ClockMode_MODE_0 = 0,
    diozero_Spi_ClockMode_MODE_1 = 1,
    diozero_Spi_ClockMode_MODE_2 = 2,
    diozero_Spi_ClockMode_MODE_3 = 3
} diozero_Spi_ClockMode;

/* Struct definitions */
typedef struct _diozero_Gpio {
    char dummy_field;
} diozero_Gpio;

typedef struct _diozero_Gpio_GetBoardInfo {
    pb_callback_t correlationId;
} diozero_Gpio_GetBoardInfo;

typedef struct _diozero_I2C {
    char dummy_field;
} diozero_I2C;

typedef struct _diozero_MessageWrapper {
    pb_callback_t type;
    pb_callback_t message;
} diozero_MessageWrapper;

typedef struct _diozero_Spi {
    char dummy_field;
} diozero_Spi;

typedef struct _diozero_Gpio_AnalogRead {
    pb_callback_t correlationId;
    int32_t gpio;
} diozero_Gpio_AnalogRead;

typedef struct _diozero_Gpio_AnalogReadResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    bool has_value;
    float value;
} diozero_Gpio_AnalogReadResponse;

typedef struct _diozero_Gpio_AnalogWrite {
    pb_callback_t correlationId;
    int32_t gpio;
    float value;
} diozero_Gpio_AnalogWrite;

typedef struct _diozero_Gpio_Close {
    pb_callback_t correlationId;
    int32_t gpio;
} diozero_Gpio_Close;

typedef struct _diozero_Gpio_DigitalRead {
    pb_callback_t correlationId;
    int32_t gpio;
} diozero_Gpio_DigitalRead;

typedef struct _diozero_Gpio_DigitalReadResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    bool has_value;
    bool value;
} diozero_Gpio_DigitalReadResponse;

typedef struct _diozero_Gpio_DigitalWrite {
    pb_callback_t correlationId;
    int32_t gpio;
    bool value;
} diozero_Gpio_DigitalWrite;

typedef struct _diozero_Gpio_Events {
    pb_callback_t correlationId;
    int32_t gpio;
    bool enabled;
} diozero_Gpio_Events;

typedef struct _diozero_Gpio_GetBoardInfoResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    pb_callback_t make;
    pb_callback_t model;
    bool has_memory;
    int32_t memory;
    pb_callback_t gpioInfo;
} diozero_Gpio_GetBoardInfoResponse;

typedef struct _diozero_Gpio_GpioInfo {
    int32_t gpio;
    pb_callback_t mode;
} diozero_Gpio_GpioInfo;

typedef struct _diozero_Gpio_Notification {
    int32_t gpio;
    int64_t epochTime;
    bool value;
} diozero_Gpio_Notification;

typedef struct _diozero_Gpio_ProvisionAnalogInput {
    pb_callback_t correlationId;
    int32_t gpio;
} diozero_Gpio_ProvisionAnalogInput;

typedef struct _diozero_Gpio_ProvisionAnalogOutput {
    pb_callback_t correlationId;
    int32_t gpio;
    float initialValue;
} diozero_Gpio_ProvisionAnalogOutput;

typedef struct _diozero_Gpio_ProvisionDigitalInput {
    pb_callback_t correlationId;
    int32_t gpio;
    bool has_pud;
    diozero_Gpio_PullUpDown pud;
    bool has_trigger;
    diozero_Gpio_Trigger trigger;
} diozero_Gpio_ProvisionDigitalInput;

typedef struct _diozero_Gpio_ProvisionDigitalInputOutput {
    pb_callback_t correlationId;
    int32_t gpio;
    bool output;
} diozero_Gpio_ProvisionDigitalInputOutput;

typedef struct _diozero_Gpio_ProvisionDigitalOutput {
    pb_callback_t correlationId;
    int32_t gpio;
    bool initialValue;
} diozero_Gpio_ProvisionDigitalOutput;

typedef struct _diozero_Gpio_ProvisionPwmOutput {
    pb_callback_t correlationId;
    int32_t gpio;
    int32_t frequency;
    float initialValue;
} diozero_Gpio_ProvisionPwmOutput;

typedef struct _diozero_Gpio_PwmRead {
    pb_callback_t correlationId;
    int32_t gpio;
} diozero_Gpio_PwmRead;

typedef struct _diozero_Gpio_PwmReadResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    bool has_value;
    float value;
} diozero_Gpio_PwmReadResponse;

typedef struct _diozero_Gpio_PwmWrite {
    pb_callback_t correlationId;
    int32_t gpio;
    float value;
} diozero_Gpio_PwmWrite;

typedef struct _diozero_I2C_Close {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
} diozero_I2C_Close;

typedef struct _diozero_I2C_Open {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t addressSize;
    int32_t clockFrequency;
} diozero_I2C_Open;

typedef struct _diozero_I2C_Read {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t length;
} diozero_I2C_Read;

typedef struct _diozero_I2C_ReadByte {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
} diozero_I2C_ReadByte;

typedef struct _diozero_I2C_ReadByteData {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t register;
} diozero_I2C_ReadByteData;

typedef struct _diozero_I2C_ReadByteResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    bool has_data;
    int32_t data;
} diozero_I2C_ReadByteResponse;

typedef struct _diozero_I2C_ReadI2CBlockData {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t register;
    int32_t length;
} diozero_I2C_ReadI2CBlockData;

typedef struct _diozero_I2C_ReadResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    pb_callback_t data;
} diozero_I2C_ReadResponse;

typedef struct _diozero_I2C_Write {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    pb_callback_t data;
} diozero_I2C_Write;

typedef struct _diozero_I2C_WriteByte {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t data;
} diozero_I2C_WriteByte;

typedef struct _diozero_I2C_WriteByteData {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t register;
    int32_t data;
} diozero_I2C_WriteByteData;

typedef struct _diozero_I2C_WriteI2CBlockData {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t address;
    int32_t register;
    pb_callback_t data;
} diozero_I2C_WriteI2CBlockData;

typedef struct _diozero_Response {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
} diozero_Response;

typedef struct _diozero_Spi_Close {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t chipSelect;
} diozero_Spi_Close;

typedef struct _diozero_Spi_Open {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t chipSelect;
    int32_t frequency;
    diozero_Spi_ClockMode clockMode;
    bool lsbFirst;
} diozero_Spi_Open;

typedef struct _diozero_Spi_SpiResponse {
    pb_callback_t correlationId;
    diozero_Status status;
    pb_callback_t detail;
    pb_callback_t rxData;
} diozero_Spi_SpiResponse;

typedef struct _diozero_Spi_Write {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t chipSelect;
    pb_callback_t txData;
} diozero_Spi_Write;

typedef struct _diozero_Spi_WriteAndRead {
    pb_callback_t correlationId;
    int32_t controller;
    int32_t chipSelect;
    pb_callback_t txData;
} diozero_Spi_WriteAndRead;


/* Helper constants for enums */
#define _diozero_Status_MIN diozero_Status_OK
#define _diozero_Status_MAX diozero_Status_ERROR
#define _diozero_Status_ARRAYSIZE ((diozero_Status)(diozero_Status_ERROR+1))

#define _diozero_Gpio_PullUpDown_MIN diozero_Gpio_PullUpDown_PUD_NONE
#define _diozero_Gpio_PullUpDown_MAX diozero_Gpio_PullUpDown_PUD_PULL_DOWN
#define _diozero_Gpio_PullUpDown_ARRAYSIZE ((diozero_Gpio_PullUpDown)(diozero_Gpio_PullUpDown_PUD_PULL_DOWN+1))

#define _diozero_Gpio_Trigger_MIN diozero_Gpio_Trigger_TRIGGER_NONE
#define _diozero_Gpio_Trigger_MAX diozero_Gpio_Trigger_TRIGGER_BOTH
#define _diozero_Gpio_Trigger_ARRAYSIZE ((diozero_Gpio_Trigger)(diozero_Gpio_Trigger_TRIGGER_BOTH+1))

#define _diozero_Gpio_GpioMode_MIN diozero_Gpio_GpioMode_DIGITAL_INPUT
#define _diozero_Gpio_GpioMode_MAX diozero_Gpio_GpioMode_UNKNOWN
#define _diozero_Gpio_GpioMode_ARRAYSIZE ((diozero_Gpio_GpioMode)(diozero_Gpio_GpioMode_UNKNOWN+1))

#define _diozero_Spi_ClockMode_MIN diozero_Spi_ClockMode_MODE_0
#define _diozero_Spi_ClockMode_MAX diozero_Spi_ClockMode_MODE_3
#define _diozero_Spi_ClockMode_ARRAYSIZE ((diozero_Spi_ClockMode)(diozero_Spi_ClockMode_MODE_3+1))


/* Initializer values for message structs */
#define diozero_MessageWrapper_init_default      {{{NULL}, NULL}, {{NULL}, NULL}}
#define diozero_Response_init_default            {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}}
#define diozero_Gpio_init_default                {0}
#define diozero_Gpio_GpioInfo_init_default       {0, {{NULL}, NULL}}
#define diozero_Gpio_GetBoardInfo_init_default   {{{NULL}, NULL}}
#define diozero_Gpio_GetBoardInfoResponse_init_default {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define diozero_Gpio_ProvisionDigitalInput_init_default {{{NULL}, NULL}, 0, false, diozero_Gpio_PullUpDown_PUD_NONE, false, diozero_Gpio_Trigger_TRIGGER_NONE}
#define diozero_Gpio_ProvisionDigitalOutput_init_default {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_ProvisionDigitalInputOutput_init_default {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_ProvisionPwmOutput_init_default {{{NULL}, NULL}, 0, 0, 0}
#define diozero_Gpio_ProvisionAnalogInput_init_default {{{NULL}, NULL}, 0}
#define diozero_Gpio_ProvisionAnalogOutput_init_default {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_DigitalRead_init_default    {{{NULL}, NULL}, 0}
#define diozero_Gpio_DigitalWrite_init_default   {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_PwmRead_init_default        {{{NULL}, NULL}, 0}
#define diozero_Gpio_PwmWrite_init_default       {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_AnalogRead_init_default     {{{NULL}, NULL}, 0}
#define diozero_Gpio_AnalogWrite_init_default    {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_Events_init_default         {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_Close_init_default          {{{NULL}, NULL}, 0}
#define diozero_Gpio_DigitalReadResponse_init_default {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_Gpio_PwmReadResponse_init_default {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_Gpio_AnalogReadResponse_init_default {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_Gpio_Notification_init_default   {0, 0, 0}
#define diozero_I2C_init_default                 {0}
#define diozero_I2C_Open_init_default            {{{NULL}, NULL}, 0, 0, 0, 0}
#define diozero_I2C_ReadByte_init_default        {{{NULL}, NULL}, 0, 0}
#define diozero_I2C_WriteByte_init_default       {{{NULL}, NULL}, 0, 0, 0}
#define diozero_I2C_Read_init_default            {{{NULL}, NULL}, 0, 0, 0}
#define diozero_I2C_Write_init_default           {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define diozero_I2C_ReadByteData_init_default    {{{NULL}, NULL}, 0, 0, 0}
#define diozero_I2C_WriteByteData_init_default   {{{NULL}, NULL}, 0, 0, 0, 0}
#define diozero_I2C_ReadI2CBlockData_init_default {{{NULL}, NULL}, 0, 0, 0, 0}
#define diozero_I2C_WriteI2CBlockData_init_default {{{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}}
#define diozero_I2C_Close_init_default           {{{NULL}, NULL}, 0, 0}
#define diozero_I2C_ReadByteResponse_init_default {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_I2C_ReadResponse_init_default    {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define diozero_Spi_init_default                 {0}
#define diozero_Spi_Open_init_default            {{{NULL}, NULL}, 0, 0, 0, _diozero_Spi_ClockMode_MIN, 0}
#define diozero_Spi_Write_init_default           {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define diozero_Spi_WriteAndRead_init_default    {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define diozero_Spi_Close_init_default           {{{NULL}, NULL}, 0, 0}
#define diozero_Spi_SpiResponse_init_default     {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define diozero_MessageWrapper_init_zero         {{{NULL}, NULL}, {{NULL}, NULL}}
#define diozero_Response_init_zero               {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}}
#define diozero_Gpio_init_zero                   {0}
#define diozero_Gpio_GpioInfo_init_zero          {0, {{NULL}, NULL}}
#define diozero_Gpio_GetBoardInfo_init_zero      {{{NULL}, NULL}}
#define diozero_Gpio_GetBoardInfoResponse_init_zero {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}}
#define diozero_Gpio_ProvisionDigitalInput_init_zero {{{NULL}, NULL}, 0, false, _diozero_Gpio_PullUpDown_MIN, false, _diozero_Gpio_Trigger_MIN}
#define diozero_Gpio_ProvisionDigitalOutput_init_zero {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_ProvisionDigitalInputOutput_init_zero {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_ProvisionPwmOutput_init_zero {{{NULL}, NULL}, 0, 0, 0}
#define diozero_Gpio_ProvisionAnalogInput_init_zero {{{NULL}, NULL}, 0}
#define diozero_Gpio_ProvisionAnalogOutput_init_zero {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_DigitalRead_init_zero       {{{NULL}, NULL}, 0}
#define diozero_Gpio_DigitalWrite_init_zero      {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_PwmRead_init_zero           {{{NULL}, NULL}, 0}
#define diozero_Gpio_PwmWrite_init_zero          {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_AnalogRead_init_zero        {{{NULL}, NULL}, 0}
#define diozero_Gpio_AnalogWrite_init_zero       {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_Events_init_zero            {{{NULL}, NULL}, 0, 0}
#define diozero_Gpio_Close_init_zero             {{{NULL}, NULL}, 0}
#define diozero_Gpio_DigitalReadResponse_init_zero {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_Gpio_PwmReadResponse_init_zero   {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_Gpio_AnalogReadResponse_init_zero {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_Gpio_Notification_init_zero      {0, 0, 0}
#define diozero_I2C_init_zero                    {0}
#define diozero_I2C_Open_init_zero               {{{NULL}, NULL}, 0, 0, 0, 0}
#define diozero_I2C_ReadByte_init_zero           {{{NULL}, NULL}, 0, 0}
#define diozero_I2C_WriteByte_init_zero          {{{NULL}, NULL}, 0, 0, 0}
#define diozero_I2C_Read_init_zero               {{{NULL}, NULL}, 0, 0, 0}
#define diozero_I2C_Write_init_zero              {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define diozero_I2C_ReadByteData_init_zero       {{{NULL}, NULL}, 0, 0, 0}
#define diozero_I2C_WriteByteData_init_zero      {{{NULL}, NULL}, 0, 0, 0, 0}
#define diozero_I2C_ReadI2CBlockData_init_zero   {{{NULL}, NULL}, 0, 0, 0, 0}
#define diozero_I2C_WriteI2CBlockData_init_zero  {{{NULL}, NULL}, 0, 0, 0, {{NULL}, NULL}}
#define diozero_I2C_Close_init_zero              {{{NULL}, NULL}, 0, 0}
#define diozero_I2C_ReadByteResponse_init_zero   {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, false, 0}
#define diozero_I2C_ReadResponse_init_zero       {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, {{NULL}, NULL}}
#define diozero_Spi_init_zero                    {0}
#define diozero_Spi_Open_init_zero               {{{NULL}, NULL}, 0, 0, 0, _diozero_Spi_ClockMode_MIN, 0}
#define diozero_Spi_Write_init_zero              {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define diozero_Spi_WriteAndRead_init_zero       {{{NULL}, NULL}, 0, 0, {{NULL}, NULL}}
#define diozero_Spi_Close_init_zero              {{{NULL}, NULL}, 0, 0}
#define diozero_Spi_SpiResponse_init_zero        {{{NULL}, NULL}, _diozero_Status_MIN, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define diozero_Gpio_GetBoardInfo_correlationId_tag 1
#define diozero_MessageWrapper_type_tag          1
#define diozero_MessageWrapper_message_tag       2
#define diozero_Gpio_AnalogRead_correlationId_tag 1
#define diozero_Gpio_AnalogRead_gpio_tag         2
#define diozero_Gpio_AnalogReadResponse_correlationId_tag 1
#define diozero_Gpio_AnalogReadResponse_status_tag 2
#define diozero_Gpio_AnalogReadResponse_detail_tag 3
#define diozero_Gpio_AnalogReadResponse_value_tag 4
#define diozero_Gpio_AnalogWrite_correlationId_tag 1
#define diozero_Gpio_AnalogWrite_gpio_tag        2
#define diozero_Gpio_AnalogWrite_value_tag       3
#define diozero_Gpio_Close_correlationId_tag     1
#define diozero_Gpio_Close_gpio_tag              2
#define diozero_Gpio_DigitalRead_correlationId_tag 1
#define diozero_Gpio_DigitalRead_gpio_tag        2
#define diozero_Gpio_DigitalReadResponse_correlationId_tag 1
#define diozero_Gpio_DigitalReadResponse_status_tag 2
#define diozero_Gpio_DigitalReadResponse_detail_tag 3
#define diozero_Gpio_DigitalReadResponse_value_tag 4
#define diozero_Gpio_DigitalWrite_correlationId_tag 1
#define diozero_Gpio_DigitalWrite_gpio_tag       2
#define diozero_Gpio_DigitalWrite_value_tag      3
#define diozero_Gpio_Events_correlationId_tag    1
#define diozero_Gpio_Events_gpio_tag             2
#define diozero_Gpio_Events_enabled_tag          3
#define diozero_Gpio_GetBoardInfoResponse_correlationId_tag 1
#define diozero_Gpio_GetBoardInfoResponse_status_tag 2
#define diozero_Gpio_GetBoardInfoResponse_detail_tag 3
#define diozero_Gpio_GetBoardInfoResponse_make_tag 4
#define diozero_Gpio_GetBoardInfoResponse_model_tag 5
#define diozero_Gpio_GetBoardInfoResponse_memory_tag 6
#define diozero_Gpio_GetBoardInfoResponse_gpioInfo_tag 7
#define diozero_Gpio_GpioInfo_gpio_tag           1
#define diozero_Gpio_GpioInfo_mode_tag           2
#define diozero_Gpio_Notification_gpio_tag       1
#define diozero_Gpio_Notification_epochTime_tag  2
#define diozero_Gpio_Notification_value_tag      3
#define diozero_Gpio_ProvisionAnalogInput_correlationId_tag 1
#define diozero_Gpio_ProvisionAnalogInput_gpio_tag 2
#define diozero_Gpio_ProvisionAnalogOutput_correlationId_tag 1
#define diozero_Gpio_ProvisionAnalogOutput_gpio_tag 2
#define diozero_Gpio_ProvisionAnalogOutput_initialValue_tag 3
#define diozero_Gpio_ProvisionDigitalInput_correlationId_tag 1
#define diozero_Gpio_ProvisionDigitalInput_gpio_tag 2
#define diozero_Gpio_ProvisionDigitalInput_pud_tag 3
#define diozero_Gpio_ProvisionDigitalInput_trigger_tag 4
#define diozero_Gpio_ProvisionDigitalInputOutput_correlationId_tag 1
#define diozero_Gpio_ProvisionDigitalInputOutput_gpio_tag 2
#define diozero_Gpio_ProvisionDigitalInputOutput_output_tag 3
#define diozero_Gpio_ProvisionDigitalOutput_correlationId_tag 1
#define diozero_Gpio_ProvisionDigitalOutput_gpio_tag 2
#define diozero_Gpio_ProvisionDigitalOutput_initialValue_tag 3
#define diozero_Gpio_ProvisionPwmOutput_correlationId_tag 1
#define diozero_Gpio_ProvisionPwmOutput_gpio_tag 2
#define diozero_Gpio_ProvisionPwmOutput_frequency_tag 3
#define diozero_Gpio_ProvisionPwmOutput_initialValue_tag 4
#define diozero_Gpio_PwmRead_correlationId_tag   1
#define diozero_Gpio_PwmRead_gpio_tag            2
#define diozero_Gpio_PwmReadResponse_correlationId_tag 1
#define diozero_Gpio_PwmReadResponse_status_tag  2
#define diozero_Gpio_PwmReadResponse_detail_tag  3
#define diozero_Gpio_PwmReadResponse_value_tag   4
#define diozero_Gpio_PwmWrite_correlationId_tag  1
#define diozero_Gpio_PwmWrite_gpio_tag           2
#define diozero_Gpio_PwmWrite_value_tag          3
#define diozero_I2C_Close_correlationId_tag      1
#define diozero_I2C_Close_controller_tag         2
#define diozero_I2C_Close_address_tag            3
#define diozero_I2C_Open_correlationId_tag       1
#define diozero_I2C_Open_controller_tag          2
#define diozero_I2C_Open_address_tag             3
#define diozero_I2C_Open_addressSize_tag         4
#define diozero_I2C_Open_clockFrequency_tag      5
#define diozero_I2C_Read_correlationId_tag       1
#define diozero_I2C_Read_controller_tag          2
#define diozero_I2C_Read_address_tag             3
#define diozero_I2C_Read_length_tag              4
#define diozero_I2C_ReadByte_correlationId_tag   1
#define diozero_I2C_ReadByte_controller_tag      2
#define diozero_I2C_ReadByte_address_tag         3
#define diozero_I2C_ReadByteData_correlationId_tag 1
#define diozero_I2C_ReadByteData_controller_tag  2
#define diozero_I2C_ReadByteData_address_tag     3
#define diozero_I2C_ReadByteData_register_tag    4
#define diozero_I2C_ReadByteResponse_correlationId_tag 1
#define diozero_I2C_ReadByteResponse_status_tag  2
#define diozero_I2C_ReadByteResponse_detail_tag  3
#define diozero_I2C_ReadByteResponse_data_tag    4
#define diozero_I2C_ReadI2CBlockData_correlationId_tag 1
#define diozero_I2C_ReadI2CBlockData_controller_tag 2
#define diozero_I2C_ReadI2CBlockData_address_tag 3
#define diozero_I2C_ReadI2CBlockData_register_tag 4
#define diozero_I2C_ReadI2CBlockData_length_tag  5
#define diozero_I2C_ReadResponse_correlationId_tag 1
#define diozero_I2C_ReadResponse_status_tag      2
#define diozero_I2C_ReadResponse_detail_tag      3
#define diozero_I2C_ReadResponse_data_tag        4
#define diozero_I2C_Write_correlationId_tag      1
#define diozero_I2C_Write_controller_tag         2
#define diozero_I2C_Write_address_tag            3
#define diozero_I2C_Write_data_tag               4
#define diozero_I2C_WriteByte_correlationId_tag  1
#define diozero_I2C_WriteByte_controller_tag     2
#define diozero_I2C_WriteByte_address_tag        3
#define diozero_I2C_WriteByte_data_tag           4
#define diozero_I2C_WriteByteData_correlationId_tag 1
#define diozero_I2C_WriteByteData_controller_tag 2
#define diozero_I2C_WriteByteData_address_tag    3
#define diozero_I2C_WriteByteData_register_tag   4
#define diozero_I2C_WriteByteData_data_tag       5
#define diozero_I2C_WriteI2CBlockData_correlationId_tag 1
#define diozero_I2C_WriteI2CBlockData_controller_tag 2
#define diozero_I2C_WriteI2CBlockData_address_tag 3
#define diozero_I2C_WriteI2CBlockData_register_tag 4
#define diozero_I2C_WriteI2CBlockData_data_tag   5
#define diozero_Response_correlationId_tag       1
#define diozero_Response_status_tag              2
#define diozero_Response_detail_tag              3
#define diozero_Spi_Close_correlationId_tag      1
#define diozero_Spi_Close_controller_tag         2
#define diozero_Spi_Close_chipSelect_tag         3
#define diozero_Spi_Open_correlationId_tag       1
#define diozero_Spi_Open_controller_tag          2
#define diozero_Spi_Open_chipSelect_tag          3
#define diozero_Spi_Open_frequency_tag           4
#define diozero_Spi_Open_clockMode_tag           5
#define diozero_Spi_Open_lsbFirst_tag            6
#define diozero_Spi_SpiResponse_correlationId_tag 1
#define diozero_Spi_SpiResponse_status_tag       2
#define diozero_Spi_SpiResponse_detail_tag       3
#define diozero_Spi_SpiResponse_rxData_tag       4
#define diozero_Spi_Write_correlationId_tag      1
#define diozero_Spi_Write_controller_tag         2
#define diozero_Spi_Write_chipSelect_tag         3
#define diozero_Spi_Write_txData_tag             4
#define diozero_Spi_WriteAndRead_correlationId_tag 1
#define diozero_Spi_WriteAndRead_controller_tag  2
#define diozero_Spi_WriteAndRead_chipSelect_tag  3
#define diozero_Spi_WriteAndRead_txData_tag      4

/* Struct field encoding specification for nanopb */
#define diozero_MessageWrapper_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   type,              1) \
X(a, CALLBACK, REQUIRED, BYTES,    message,           2)
#define diozero_MessageWrapper_CALLBACK pb_default_field_callback
#define diozero_MessageWrapper_DEFAULT NULL

#define diozero_Response_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3)
#define diozero_Response_CALLBACK pb_default_field_callback
#define diozero_Response_DEFAULT NULL

#define diozero_Gpio_FIELDLIST(X, a) \

#define diozero_Gpio_CALLBACK NULL
#define diozero_Gpio_DEFAULT NULL

#define diozero_Gpio_GpioInfo_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              1) \
X(a, CALLBACK, REPEATED, UENUM,    mode,              2)
#define diozero_Gpio_GpioInfo_CALLBACK pb_default_field_callback
#define diozero_Gpio_GpioInfo_DEFAULT NULL

#define diozero_Gpio_GetBoardInfo_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1)
#define diozero_Gpio_GetBoardInfo_CALLBACK pb_default_field_callback
#define diozero_Gpio_GetBoardInfo_DEFAULT NULL

#define diozero_Gpio_GetBoardInfoResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, CALLBACK, OPTIONAL, STRING,   make,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   model,             5) \
X(a, STATIC,   OPTIONAL, INT32,    memory,            6) \
X(a, CALLBACK, REPEATED, MESSAGE,  gpioInfo,          7)
#define diozero_Gpio_GetBoardInfoResponse_CALLBACK pb_default_field_callback
#define diozero_Gpio_GetBoardInfoResponse_DEFAULT NULL
#define diozero_Gpio_GetBoardInfoResponse_gpioInfo_MSGTYPE diozero_Gpio_GpioInfo

#define diozero_Gpio_ProvisionDigitalInput_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   OPTIONAL, UENUM,    pud,               3) \
X(a, STATIC,   OPTIONAL, UENUM,    trigger,           4)
#define diozero_Gpio_ProvisionDigitalInput_CALLBACK pb_default_field_callback
#define diozero_Gpio_ProvisionDigitalInput_DEFAULT (const pb_byte_t*)"\x18\x00\x20\x00\x00"

#define diozero_Gpio_ProvisionDigitalOutput_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, BOOL,     initialValue,      3)
#define diozero_Gpio_ProvisionDigitalOutput_CALLBACK pb_default_field_callback
#define diozero_Gpio_ProvisionDigitalOutput_DEFAULT NULL

#define diozero_Gpio_ProvisionDigitalInputOutput_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, BOOL,     output,            3)
#define diozero_Gpio_ProvisionDigitalInputOutput_CALLBACK pb_default_field_callback
#define diozero_Gpio_ProvisionDigitalInputOutput_DEFAULT NULL

#define diozero_Gpio_ProvisionPwmOutput_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, INT32,    frequency,         3) \
X(a, STATIC,   REQUIRED, FLOAT,    initialValue,      4)
#define diozero_Gpio_ProvisionPwmOutput_CALLBACK pb_default_field_callback
#define diozero_Gpio_ProvisionPwmOutput_DEFAULT NULL

#define diozero_Gpio_ProvisionAnalogInput_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2)
#define diozero_Gpio_ProvisionAnalogInput_CALLBACK pb_default_field_callback
#define diozero_Gpio_ProvisionAnalogInput_DEFAULT NULL

#define diozero_Gpio_ProvisionAnalogOutput_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, FLOAT,    initialValue,      3)
#define diozero_Gpio_ProvisionAnalogOutput_CALLBACK pb_default_field_callback
#define diozero_Gpio_ProvisionAnalogOutput_DEFAULT NULL

#define diozero_Gpio_DigitalRead_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2)
#define diozero_Gpio_DigitalRead_CALLBACK pb_default_field_callback
#define diozero_Gpio_DigitalRead_DEFAULT NULL

#define diozero_Gpio_DigitalWrite_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, BOOL,     value,             3)
#define diozero_Gpio_DigitalWrite_CALLBACK pb_default_field_callback
#define diozero_Gpio_DigitalWrite_DEFAULT NULL

#define diozero_Gpio_PwmRead_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2)
#define diozero_Gpio_PwmRead_CALLBACK pb_default_field_callback
#define diozero_Gpio_PwmRead_DEFAULT NULL

#define diozero_Gpio_PwmWrite_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, FLOAT,    value,             3)
#define diozero_Gpio_PwmWrite_CALLBACK pb_default_field_callback
#define diozero_Gpio_PwmWrite_DEFAULT NULL

#define diozero_Gpio_AnalogRead_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2)
#define diozero_Gpio_AnalogRead_CALLBACK pb_default_field_callback
#define diozero_Gpio_AnalogRead_DEFAULT NULL

#define diozero_Gpio_AnalogWrite_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, FLOAT,    value,             3)
#define diozero_Gpio_AnalogWrite_CALLBACK pb_default_field_callback
#define diozero_Gpio_AnalogWrite_DEFAULT NULL

#define diozero_Gpio_Events_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2) \
X(a, STATIC,   REQUIRED, BOOL,     enabled,           3)
#define diozero_Gpio_Events_CALLBACK pb_default_field_callback
#define diozero_Gpio_Events_DEFAULT NULL

#define diozero_Gpio_Close_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              2)
#define diozero_Gpio_Close_CALLBACK pb_default_field_callback
#define diozero_Gpio_Close_DEFAULT NULL

#define diozero_Gpio_DigitalReadResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, STATIC,   OPTIONAL, BOOL,     value,             4)
#define diozero_Gpio_DigitalReadResponse_CALLBACK pb_default_field_callback
#define diozero_Gpio_DigitalReadResponse_DEFAULT NULL

#define diozero_Gpio_PwmReadResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, STATIC,   OPTIONAL, FLOAT,    value,             4)
#define diozero_Gpio_PwmReadResponse_CALLBACK pb_default_field_callback
#define diozero_Gpio_PwmReadResponse_DEFAULT NULL

#define diozero_Gpio_AnalogReadResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, STATIC,   OPTIONAL, FLOAT,    value,             4)
#define diozero_Gpio_AnalogReadResponse_CALLBACK pb_default_field_callback
#define diozero_Gpio_AnalogReadResponse_DEFAULT NULL

#define diozero_Gpio_Notification_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    gpio,              1) \
X(a, STATIC,   REQUIRED, INT64,    epochTime,         2) \
X(a, STATIC,   REQUIRED, BOOL,     value,             3)
#define diozero_Gpio_Notification_CALLBACK NULL
#define diozero_Gpio_Notification_DEFAULT NULL

#define diozero_I2C_FIELDLIST(X, a) \

#define diozero_I2C_CALLBACK NULL
#define diozero_I2C_DEFAULT NULL

#define diozero_I2C_Open_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    addressSize,       4) \
X(a, STATIC,   REQUIRED, INT32,    clockFrequency,    5)
#define diozero_I2C_Open_CALLBACK pb_default_field_callback
#define diozero_I2C_Open_DEFAULT NULL

#define diozero_I2C_ReadByte_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3)
#define diozero_I2C_ReadByte_CALLBACK pb_default_field_callback
#define diozero_I2C_ReadByte_DEFAULT NULL

#define diozero_I2C_WriteByte_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    data,              4)
#define diozero_I2C_WriteByte_CALLBACK pb_default_field_callback
#define diozero_I2C_WriteByte_DEFAULT NULL

#define diozero_I2C_Read_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    length,            4)
#define diozero_I2C_Read_CALLBACK pb_default_field_callback
#define diozero_I2C_Read_DEFAULT NULL

#define diozero_I2C_Write_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, CALLBACK, REQUIRED, BYTES,    data,              4)
#define diozero_I2C_Write_CALLBACK pb_default_field_callback
#define diozero_I2C_Write_DEFAULT NULL

#define diozero_I2C_ReadByteData_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    register,          4)
#define diozero_I2C_ReadByteData_CALLBACK pb_default_field_callback
#define diozero_I2C_ReadByteData_DEFAULT NULL

#define diozero_I2C_WriteByteData_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    register,          4) \
X(a, STATIC,   REQUIRED, INT32,    data,              5)
#define diozero_I2C_WriteByteData_CALLBACK pb_default_field_callback
#define diozero_I2C_WriteByteData_DEFAULT NULL

#define diozero_I2C_ReadI2CBlockData_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    register,          4) \
X(a, STATIC,   REQUIRED, INT32,    length,            5)
#define diozero_I2C_ReadI2CBlockData_CALLBACK pb_default_field_callback
#define diozero_I2C_ReadI2CBlockData_DEFAULT NULL

#define diozero_I2C_WriteI2CBlockData_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3) \
X(a, STATIC,   REQUIRED, INT32,    register,          4) \
X(a, CALLBACK, REQUIRED, BYTES,    data,              5)
#define diozero_I2C_WriteI2CBlockData_CALLBACK pb_default_field_callback
#define diozero_I2C_WriteI2CBlockData_DEFAULT NULL

#define diozero_I2C_Close_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    address,           3)
#define diozero_I2C_Close_CALLBACK pb_default_field_callback
#define diozero_I2C_Close_DEFAULT NULL

#define diozero_I2C_ReadByteResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, STATIC,   OPTIONAL, INT32,    data,              4)
#define diozero_I2C_ReadByteResponse_CALLBACK pb_default_field_callback
#define diozero_I2C_ReadByteResponse_DEFAULT NULL

#define diozero_I2C_ReadResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, CALLBACK, OPTIONAL, BYTES,    data,              4)
#define diozero_I2C_ReadResponse_CALLBACK pb_default_field_callback
#define diozero_I2C_ReadResponse_DEFAULT NULL

#define diozero_Spi_FIELDLIST(X, a) \

#define diozero_Spi_CALLBACK NULL
#define diozero_Spi_DEFAULT NULL

#define diozero_Spi_Open_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    chipSelect,        3) \
X(a, STATIC,   REQUIRED, INT32,    frequency,         4) \
X(a, STATIC,   REQUIRED, UENUM,    clockMode,         5) \
X(a, STATIC,   REQUIRED, BOOL,     lsbFirst,          6)
#define diozero_Spi_Open_CALLBACK pb_default_field_callback
#define diozero_Spi_Open_DEFAULT NULL

#define diozero_Spi_Write_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    chipSelect,        3) \
X(a, CALLBACK, REQUIRED, BYTES,    txData,            4)
#define diozero_Spi_Write_CALLBACK pb_default_field_callback
#define diozero_Spi_Write_DEFAULT NULL

#define diozero_Spi_WriteAndRead_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    chipSelect,        3) \
X(a, CALLBACK, REQUIRED, BYTES,    txData,            4)
#define diozero_Spi_WriteAndRead_CALLBACK pb_default_field_callback
#define diozero_Spi_WriteAndRead_DEFAULT NULL

#define diozero_Spi_Close_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, INT32,    controller,        2) \
X(a, STATIC,   REQUIRED, INT32,    chipSelect,        3)
#define diozero_Spi_Close_CALLBACK pb_default_field_callback
#define diozero_Spi_Close_DEFAULT NULL

#define diozero_Spi_SpiResponse_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   correlationId,     1) \
X(a, STATIC,   REQUIRED, UENUM,    status,            2) \
X(a, CALLBACK, OPTIONAL, STRING,   detail,            3) \
X(a, CALLBACK, OPTIONAL, BYTES,    rxData,            4)
#define diozero_Spi_SpiResponse_CALLBACK pb_default_field_callback
#define diozero_Spi_SpiResponse_DEFAULT NULL

extern const pb_msgdesc_t diozero_MessageWrapper_msg;
extern const pb_msgdesc_t diozero_Response_msg;
extern const pb_msgdesc_t diozero_Gpio_msg;
extern const pb_msgdesc_t diozero_Gpio_GpioInfo_msg;
extern const pb_msgdesc_t diozero_Gpio_GetBoardInfo_msg;
extern const pb_msgdesc_t diozero_Gpio_GetBoardInfoResponse_msg;
extern const pb_msgdesc_t diozero_Gpio_ProvisionDigitalInput_msg;
extern const pb_msgdesc_t diozero_Gpio_ProvisionDigitalOutput_msg;
extern const pb_msgdesc_t diozero_Gpio_ProvisionDigitalInputOutput_msg;
extern const pb_msgdesc_t diozero_Gpio_ProvisionPwmOutput_msg;
extern const pb_msgdesc_t diozero_Gpio_ProvisionAnalogInput_msg;
extern const pb_msgdesc_t diozero_Gpio_ProvisionAnalogOutput_msg;
extern const pb_msgdesc_t diozero_Gpio_DigitalRead_msg;
extern const pb_msgdesc_t diozero_Gpio_DigitalWrite_msg;
extern const pb_msgdesc_t diozero_Gpio_PwmRead_msg;
extern const pb_msgdesc_t diozero_Gpio_PwmWrite_msg;
extern const pb_msgdesc_t diozero_Gpio_AnalogRead_msg;
extern const pb_msgdesc_t diozero_Gpio_AnalogWrite_msg;
extern const pb_msgdesc_t diozero_Gpio_Events_msg;
extern const pb_msgdesc_t diozero_Gpio_Close_msg;
extern const pb_msgdesc_t diozero_Gpio_DigitalReadResponse_msg;
extern const pb_msgdesc_t diozero_Gpio_PwmReadResponse_msg;
extern const pb_msgdesc_t diozero_Gpio_AnalogReadResponse_msg;
extern const pb_msgdesc_t diozero_Gpio_Notification_msg;
extern const pb_msgdesc_t diozero_I2C_msg;
extern const pb_msgdesc_t diozero_I2C_Open_msg;
extern const pb_msgdesc_t diozero_I2C_ReadByte_msg;
extern const pb_msgdesc_t diozero_I2C_WriteByte_msg;
extern const pb_msgdesc_t diozero_I2C_Read_msg;
extern const pb_msgdesc_t diozero_I2C_Write_msg;
extern const pb_msgdesc_t diozero_I2C_ReadByteData_msg;
extern const pb_msgdesc_t diozero_I2C_WriteByteData_msg;
extern const pb_msgdesc_t diozero_I2C_ReadI2CBlockData_msg;
extern const pb_msgdesc_t diozero_I2C_WriteI2CBlockData_msg;
extern const pb_msgdesc_t diozero_I2C_Close_msg;
extern const pb_msgdesc_t diozero_I2C_ReadByteResponse_msg;
extern const pb_msgdesc_t diozero_I2C_ReadResponse_msg;
extern const pb_msgdesc_t diozero_Spi_msg;
extern const pb_msgdesc_t diozero_Spi_Open_msg;
extern const pb_msgdesc_t diozero_Spi_Write_msg;
extern const pb_msgdesc_t diozero_Spi_WriteAndRead_msg;
extern const pb_msgdesc_t diozero_Spi_Close_msg;
extern const pb_msgdesc_t diozero_Spi_SpiResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define diozero_MessageWrapper_fields &diozero_MessageWrapper_msg
#define diozero_Response_fields &diozero_Response_msg
#define diozero_Gpio_fields &diozero_Gpio_msg
#define diozero_Gpio_GpioInfo_fields &diozero_Gpio_GpioInfo_msg
#define diozero_Gpio_GetBoardInfo_fields &diozero_Gpio_GetBoardInfo_msg
#define diozero_Gpio_GetBoardInfoResponse_fields &diozero_Gpio_GetBoardInfoResponse_msg
#define diozero_Gpio_ProvisionDigitalInput_fields &diozero_Gpio_ProvisionDigitalInput_msg
#define diozero_Gpio_ProvisionDigitalOutput_fields &diozero_Gpio_ProvisionDigitalOutput_msg
#define diozero_Gpio_ProvisionDigitalInputOutput_fields &diozero_Gpio_ProvisionDigitalInputOutput_msg
#define diozero_Gpio_ProvisionPwmOutput_fields &diozero_Gpio_ProvisionPwmOutput_msg
#define diozero_Gpio_ProvisionAnalogInput_fields &diozero_Gpio_ProvisionAnalogInput_msg
#define diozero_Gpio_ProvisionAnalogOutput_fields &diozero_Gpio_ProvisionAnalogOutput_msg
#define diozero_Gpio_DigitalRead_fields &diozero_Gpio_DigitalRead_msg
#define diozero_Gpio_DigitalWrite_fields &diozero_Gpio_DigitalWrite_msg
#define diozero_Gpio_PwmRead_fields &diozero_Gpio_PwmRead_msg
#define diozero_Gpio_PwmWrite_fields &diozero_Gpio_PwmWrite_msg
#define diozero_Gpio_AnalogRead_fields &diozero_Gpio_AnalogRead_msg
#define diozero_Gpio_AnalogWrite_fields &diozero_Gpio_AnalogWrite_msg
#define diozero_Gpio_Events_fields &diozero_Gpio_Events_msg
#define diozero_Gpio_Close_fields &diozero_Gpio_Close_msg
#define diozero_Gpio_DigitalReadResponse_fields &diozero_Gpio_DigitalReadResponse_msg
#define diozero_Gpio_PwmReadResponse_fields &diozero_Gpio_PwmReadResponse_msg
#define diozero_Gpio_AnalogReadResponse_fields &diozero_Gpio_AnalogReadResponse_msg
#define diozero_Gpio_Notification_fields &diozero_Gpio_Notification_msg
#define diozero_I2C_fields &diozero_I2C_msg
#define diozero_I2C_Open_fields &diozero_I2C_Open_msg
#define diozero_I2C_ReadByte_fields &diozero_I2C_ReadByte_msg
#define diozero_I2C_WriteByte_fields &diozero_I2C_WriteByte_msg
#define diozero_I2C_Read_fields &diozero_I2C_Read_msg
#define diozero_I2C_Write_fields &diozero_I2C_Write_msg
#define diozero_I2C_ReadByteData_fields &diozero_I2C_ReadByteData_msg
#define diozero_I2C_WriteByteData_fields &diozero_I2C_WriteByteData_msg
#define diozero_I2C_ReadI2CBlockData_fields &diozero_I2C_ReadI2CBlockData_msg
#define diozero_I2C_WriteI2CBlockData_fields &diozero_I2C_WriteI2CBlockData_msg
#define diozero_I2C_Close_fields &diozero_I2C_Close_msg
#define diozero_I2C_ReadByteResponse_fields &diozero_I2C_ReadByteResponse_msg
#define diozero_I2C_ReadResponse_fields &diozero_I2C_ReadResponse_msg
#define diozero_Spi_fields &diozero_Spi_msg
#define diozero_Spi_Open_fields &diozero_Spi_Open_msg
#define diozero_Spi_Write_fields &diozero_Spi_Write_msg
#define diozero_Spi_WriteAndRead_fields &diozero_Spi_WriteAndRead_msg
#define diozero_Spi_Close_fields &diozero_Spi_Close_msg
#define diozero_Spi_SpiResponse_fields &diozero_Spi_SpiResponse_msg

/* Maximum encoded size of messages (where known) */
/* diozero_MessageWrapper_size depends on runtime parameters */
/* diozero_Response_size depends on runtime parameters */
#define diozero_Gpio_size                        0
/* diozero_Gpio_GpioInfo_size depends on runtime parameters */
/* diozero_Gpio_GetBoardInfo_size depends on runtime parameters */
/* diozero_Gpio_GetBoardInfoResponse_size depends on runtime parameters */
/* diozero_Gpio_ProvisionDigitalInput_size depends on runtime parameters */
/* diozero_Gpio_ProvisionDigitalOutput_size depends on runtime parameters */
/* diozero_Gpio_ProvisionDigitalInputOutput_size depends on runtime parameters */
/* diozero_Gpio_ProvisionPwmOutput_size depends on runtime parameters */
/* diozero_Gpio_ProvisionAnalogInput_size depends on runtime parameters */
/* diozero_Gpio_ProvisionAnalogOutput_size depends on runtime parameters */
/* diozero_Gpio_DigitalRead_size depends on runtime parameters */
/* diozero_Gpio_DigitalWrite_size depends on runtime parameters */
/* diozero_Gpio_PwmRead_size depends on runtime parameters */
/* diozero_Gpio_PwmWrite_size depends on runtime parameters */
/* diozero_Gpio_AnalogRead_size depends on runtime parameters */
/* diozero_Gpio_AnalogWrite_size depends on runtime parameters */
/* diozero_Gpio_Events_size depends on runtime parameters */
/* diozero_Gpio_Close_size depends on runtime parameters */
/* diozero_Gpio_DigitalReadResponse_size depends on runtime parameters */
/* diozero_Gpio_PwmReadResponse_size depends on runtime parameters */
/* diozero_Gpio_AnalogReadResponse_size depends on runtime parameters */
#define diozero_Gpio_Notification_size           24
#define diozero_I2C_size                         0
/* diozero_I2C_Open_size depends on runtime parameters */
/* diozero_I2C_ReadByte_size depends on runtime parameters */
/* diozero_I2C_WriteByte_size depends on runtime parameters */
/* diozero_I2C_Read_size depends on runtime parameters */
/* diozero_I2C_Write_size depends on runtime parameters */
/* diozero_I2C_ReadByteData_size depends on runtime parameters */
/* diozero_I2C_WriteByteData_size depends on runtime parameters */
/* diozero_I2C_ReadI2CBlockData_size depends on runtime parameters */
/* diozero_I2C_WriteI2CBlockData_size depends on runtime parameters */
/* diozero_I2C_Close_size depends on runtime parameters */
/* diozero_I2C_ReadByteResponse_size depends on runtime parameters */
/* diozero_I2C_ReadResponse_size depends on runtime parameters */
#define diozero_Spi_size                         0
/* diozero_Spi_Open_size depends on runtime parameters */
/* diozero_Spi_Write_size depends on runtime parameters */
/* diozero_Spi_WriteAndRead_size depends on runtime parameters */
/* diozero_Spi_Close_size depends on runtime parameters */
/* diozero_Spi_SpiResponse_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
